{
    "lang": "Python",
    "code": "﻿\nimport tkinter as tk\nfrom tkinter import scrolledtext, ttk\nfrom tkinter import messagebox\nfrom docx import Document\nimport pandas as pd\nfrom pptx import Presentation\nimport sqlite3\nimport smtplib\nfrom datetime import datetime\nfrom ttkthemes import ThemedTk\n\nclass OfficeSuite:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Офисный пакет\")\n        self.create_menus()\n        self.create_tabs()\n\n    def create_menus(self):\n        self.menu = tk.Menu(self.root)\n        self.root.config(menu=self.menu)\n\n        self.file_menu = tk.Menu(self.menu)\n        self.menu.add_cascade(label=\"Файл\", menu=self.file_menu)\n        self.file_menu.add_command(label=\"Открыть документ\", command=self.open_document)\n        self.file_menu.add_command(label=\"Сохранить документ\", command=self.save_document)\n        self.file_menu.add_separator()\n        self.file_menu.add_command(label=\"Открыть таблицу\", command=self.open_spreadsheet)\n        self.file_menu.add_command(label=\"Сохранить таблицу\", command=self.save_spreadsheet)\n        self.file_menu.add_separator()\n        self.file_menu.add_command(label=\"Создать презентацию\", command=self.create_presentation)\n        self.file_menu.add_command(label=\"Создать базу данных\", command=self.create_database)\n        self.file_menu.add_command(label=\"Отправить email\", command=self.send_email)\n        self.file_menu.add_command(label=\"Показать календарь\", command=self.show_calendar)\n\n    def create_tabs(self):\n        self.notebook = ttk.Notebook(self.root)\n        self.notebook.pack(fill=tk.BOTH, expand=True)\n\n        self.text_frame = tk.Frame(self.notebook)\n        self.notebook.add(self.text_frame, text=\"Текст\")\n        self.create_text_processor()\n\n        self.spreadsheet_frame = tk.Frame(self.notebook)\n        self.notebook.add(self.spreadsheet_frame, text=\"Таблица\")\n        self.create_spreadsheet_processor()\n\n        self.calendar_frame = tk.Frame(self.notebook)\n        self.notebook.add(self.calendar_frame, text=\"Календарь\")\n        self.create_calendar()\n\n    def create_text_processor(self):\n        self.text_area = scrolledtext.ScrolledText(self.text_frame, width=80, height=20)\n        self.text_area.pack(fill=tk.BOTH, expand=True)\n\n    def create_spreadsheet_processor(self):\n        self.data = [[\"A1\", \"B1\", \"C1\"], [\"A2\", \"B2\", \"C2\"]]\n        self.columns = (\"A\", \"B\", \"C\")\n\n        self.tree = ttk.Treeview(self.spreadsheet_frame, columns=self.columns, show='headings')\n        for col in self.columns:\n            self.tree.heading(col, text=col)\n        self.update_table()\n        self.tree.pack(fill=tk.BOTH, expand=True)\n\n    def create_calendar(self):\n        self.calendar_tree = ttk.Treeview(self.calendar_frame, columns=(\"time\", \"event\"), show='headings')\n        self.calendar_tree.heading(\"time\", text=\"Время\")\n        self.calendar_tree.heading(\"event\", text=\"Событие\")\n        self.calendar_tree.pack(fill=tk.BOTH, expand=True)\n\n        now = datetime.now()\n        self.calendar_tree.insert(\"\", \"end\", values=(now.strftime(\"%H:%M\"), \"Событие\"))\n\n    def save_document(self):\n        doc = Document()\n        doc.add_paragraph(self.text_area.get(1.0, tk.END))\n        doc.save('document.docx')\n\n    def open_document(self):\n        try:\n            doc = Document('document.docx')\n            self.text_area.delete(1.0, tk.END)\n            for paragraph in doc.paragraphs:\n                self.text_area.insert(tk.END, paragraph.text + '\\n')\n        except FileNotFoundError:\n            messagebox.showerror(\"Ошибка\", \"Файл не найден\")\n\n    def save_spreadsheet(self):\n        df = pd.DataFrame(self.data, columns=self.columns)\n        df.to_excel('spreadsheet.xlsx', index=False)\n\n    def open_spreadsheet(self):\n        try:\n            df = pd.read_excel('spreadsheet.xlsx')\n            self.data = df.values.tolist()\n            self.update_table()\n        except FileNotFoundError:\n            messagebox.showerror(\"Ошибка\", \"Файл не найден\")\n\n    def update_table(self):\n        for i in self.tree.get_children():\n            self.tree.delete(i)\n        for row in self.data:\n            self.tree.insert('', 'end', values=row)\n\n    def create_presentation(self):\n        prs = Presentation()\n        slide = prs.slides.add_slide(prs.slide_layouts[5])\n        title = slide.shapes.title\n        title.text = \"Презентация\"\n        prs.save('presentation.pptx')\n\n    def create_database(self):\n        conn = sqlite3.connect('database.db')\n        c = conn.cursor()\n        c.execute('CREATE TABLE IF NOT EXISTS data (id INTEGER PRIMARY KEY, value TEXT)')\n        conn.commit()\n        conn.close()\n\n    def send_email(self):\n        smtp_server = \"smtp.gmail.com\"\n        smtp_port = 587\n        smtp_username = \"your_email@gmail.com\"\n        smtp_password = \"your_app_password\"  # Замените на ваш пароль приложения\n\n        try:\n            server = smtplib.SMTP(smtp_server, smtp_port)\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, \"recipient@example.com\", \"Subject: Test\\n\\nThis is a test email.\")\n            server.quit()\n            messagebox.showinfo(\"Успех\", \"Email успешно отправлен\")\n        except smtplib.SMTPAuthenticationError as e:\n            messagebox.showerror(\"Ошибка\", f\"Ошибка аутентификации: {e}\")\n        except Exception as e:\n            messagebox.showerror(\"Ошибка\", f\"Ошибка при отправке email: {e}\")\n\n    def show_calendar(self):\n        top = tk.Toplevel(self.root)\n        top.title(\"Календарь\")\n\n        cal = ttk.Treeview(top, columns=(\"time\", \"event\"), show='headings')\n        cal.heading(\"time\", text=\"Время\")\n        cal.heading(\"event\", text=\"Событие\")\n        cal.pack()\n\n        now = datetime.now()\n        cal.insert(\"\", \"end\", values=(now.strftime(\"%H:%M\"), \"Событие\"))\n\nif __name__ == \"__main__\":\n    root = ThemedTk(theme=\"arc\")\n    app = OfficeSuite(root)\n    root.mainloop()\n"
}